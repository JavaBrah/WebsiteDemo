CREATE TABLE users (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR NOT NULL,
    email VARCHAR UNIQUE NOT NULL,
    created_at TIMESTAMP NOT NULL
);

\copy users FROM 'data/users.csv' WITH (HEADER true, DELIMITER ',');

-------------------------

-- items table

-- **YOUR CODE GOES HERE**
CREATE TABLE items (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR UNIQUE NOT NULL, -- ADD REGEX TO FILTER FOR WORDS ONLY
    price DECIMAL(8, 2) NOT NULL,  -- AD REGEX TO FILTER FOR NUMBERS ONLY 
    created_at TIMESTAMP NOT NULL    
);

\copy items FROM 'data/items.csv' WITH (HEADER true, DELIMITER ',');

-------------------------

-- order_items table

-- **YOUR CODE GOES HERE**
CREATE TABLE order_items (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    order_id BIGINT NOT NULL,
    item_id BIGINT NOT NULL,
    quantity BIGINT NOT NULL 
);

\copy order_items FROM 'data/order_items.csv' WITH (HEADER true, DELIMITER ',');

-- orders table

-- **YOUR CODE GOES HERE**
CREATE TABLE orders (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id BIGINT NOT NULL,
    total_price DECIMAL(10, 2) NOT NULL,
    created_at TIMESTAMP NOT NULL
);
\copy orders FROM 'data/orders.csv' WITH (HEADER true, DELIMITER ',');

SELECT name, email FROM users;

SELECT name, price FROM items;

SELECT SUM(total_price) AS total_revenue FROM orders;

SELECT name, price FROM items
WHERE price > 25.00;

SELECT name FROM users 
WHERE name ILIKE '%s%';

SELECT user_id, COUNT(orders.user_id) AS order_count
FROM orders 
INNER JOIN users 
ON orders.user_id = users.id
GROUP BY orders.user_id, orders.user_id;

SELECT users.name, users.email
FROM orders 
INNER JOIN users 
ON orders.user_id = users.id
GROUP BY users.name, users.email 
HAVING COUNT(orders.user_id) >= 2;

SELECT items.name, SUM(order_items.quantity) AS total_quantity_sold
FROM order_items
INNER JOIN items 
ON order_items.item_id = items.id 
GROUP BY items.name;

SELECT users.name, SUM(orders.total_price) AS total_revenue_by_user
FROM orders
INNER JOIN users 
ON orders.user_id = users.id 
GROUP BY users.name 
ORDER BY users.name ASC;

SELECT users.name, users.email 
FROM users 
LEFT JOIN orders 
ON users.id = orders.user_id
WHERE orders.user_id IS NULL;
